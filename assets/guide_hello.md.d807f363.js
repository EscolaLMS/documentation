import{_ as e,o,c as t,V as r}from"./chunks/framework.c495fe11.js";const p=JSON.parse('{"title":"Hello","description":"","frontmatter":{},"headers":[],"relativePath":"guide/hello.md","filePath":"guide/hello.md"}'),a={name:"guide/hello.md"},s=r('<h1 id="hello" tabindex="-1">Hello <a class="header-anchor" href="#hello" aria-label="Permalink to &quot;Hello&quot;">​</a></h1><h2 id="browser-api-access-restrictions-2" tabindex="-1">Browser API Access Restrictions 2 <a class="header-anchor" href="#browser-api-access-restrictions-2" aria-label="Permalink to &quot;Browser API Access Restrictions 2&quot;">​</a></h2><p>Because VuePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the <a href="https://ssr.vuejs.org/en/universal.html" target="_blank" rel="noreferrer">universal code requirements</a>. In short, make sure to only access Browser / DOM APIs in <code>beforeMount</code> or <code>mounted</code> hooks.</p><p>If you are using or demoing components that are not SSR friendly (for example containing custom directives), you can wrap them inside the built-in <code>&lt;ClientOnly&gt;</code> component:</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',5),n=[s];function i(c,l,d,h,u,_){return o(),t("div",null,n)}const f=e(a,[["render",i]]);export{p as __pageData,f as default};
