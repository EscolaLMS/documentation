import{_ as e,o as r,c as a,V as n}from"./chunks/framework.c495fe11.js";const p=JSON.parse('{"title":"Using Vue in Markdown","description":"","frontmatter":{},"headers":[],"relativePath":"guide/using-vue.md","filePath":"guide/using-vue.md"}'),s={name:"guide/using-vue.md"},o=n('<h1 id="using-vue-in-markdown" tabindex="-1">Using Vue in Markdown <a class="header-anchor" href="#using-vue-in-markdown" aria-label="Permalink to &quot;Using Vue in Markdown&quot;">​</a></h1><h2 id="browser-api-access-restrictions" tabindex="-1">Browser API Access Restrictions <a class="header-anchor" href="#browser-api-access-restrictions" aria-label="Permalink to &quot;Browser API Access Restrictions&quot;">​</a></h2><p>Because VuePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the <a href="https://ssr.vuejs.org/en/universal.html" target="_blank" rel="noreferrer">universal code requirements</a>. In short, make sure to only access Browser / DOM APIs in <code>beforeMount</code> or <code>mounted</code> hooks.</p><p>If you are using or demoing components that are not SSR friendly (for example containing custom directives), you can wrap them inside the built-in <code>&lt;ClientOnly&gt;</code> component:</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',5),t=[o];function i(c,u,d,l,h,_){return r(),a("div",null,t)}const g=e(s,[["render",i]]);export{p as __pageData,g as default};
