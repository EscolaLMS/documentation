import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c495fe11.js";const A=JSON.parse('{"title":"Image processing module","description":"","frontmatter":{},"headers":[],"relativePath":"packages/images.md","filePath":"packages/images.md"}'),o={name:"packages/images.md"},e=l(`<h1 id="image-processing-module" tabindex="-1">Image processing module <a class="header-anchor" href="#image-processing-module" aria-label="Permalink to &quot;Image processing module&quot;">​</a></h1><p><a href="https://escolalms.github.io/Images/" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/documentation-swagger-green" alt="swagger"></a><a href="https://codecov.io/gh/EscolaLMS/Images" target="_blank" rel="noreferrer"><img src="https://codecov.io/gh/EscolaLMS/Images/branch/main/graph/badge.svg?token=NRAN4R8AGZ" alt="codecov"></a><a href="https://github.com/EscolaLMS/Courses/actions/workflows/test.yml" target="_blank" rel="noreferrer"><img src="https://github.com/EscolaLMS/Images/actions/workflows/test.yml/badge.svg" alt="phpunit"></a><a href="https://packagist.org/packages/escolalms/images" target="_blank" rel="noreferrer"><img src="https://img.shields.io/packagist/dt/escolalms/images" alt="downloads"></a><a href="https://packagist.org/packages/escolalms/images" target="_blank" rel="noreferrer"><img src="https://img.shields.io/packagist/v/escolalms/images" alt="downloads"></a><a href="https://packagist.org/packages/escolalms/images" target="_blank" rel="noreferrer"><img src="https://img.shields.io/packagist/l/escolalms/images" alt="downloads"></a><a href="https://codeclimate.com/github/EscolaLMS/Images/maintainability" target="_blank" rel="noreferrer"><img src="https://api.codeclimate.com/v1/badges/7dfeae0462e3599797bf/maintainability" alt="Maintainability"></a><a href="https://codeclimate.com/github/EscolaLMS/Images/test_coverage" target="_blank" rel="noreferrer"><img src="https://api.codeclimate.com/v1/badges/7dfeae0462e3599797bf/test_coverage" alt="Test Coverage"></a></p><h2 id="what-does-it-do" tabindex="-1">What does it do <a class="header-anchor" href="#what-does-it-do" aria-label="Permalink to &quot;What does it do&quot;">​</a></h2><p>The package creates resized images from source by given parameters. This is a headless approach so the backend doesn&#39;t know the requested sizes before frontend requests any.</p><p>The input images are stored by Laravel in any of available disk (local storage/s3/any bucket). Once a resized version is requested a cached version in created and returend. Below are examples to show the overall idea.</p><p>The initial resize is done by <a href="https://github.com/Intervention/image" target="_blank" rel="noreferrer">Intervention/image</a> with <code>GD</code> driver. That can be <a href="http://image.intervention.io/getting_started/configuration" target="_blank" rel="noreferrer">configured</a>.</p><p>After inital resized all the images are optimized with <a href="https://packagist.org/packages/spatie/image-optimizer" target="_blank" rel="noreferrer">image-optimizer</a>.</p><p>For best results binaries must <a href="https://github.com/spatie/image-optimizer#optimization-tools" target="_blank" rel="noreferrer">be installed</a>. EscolaLMS prepared <a href="https://hub.docker.com/r/escolalms/php" target="_blank" rel="noreferrer">Docker Images</a> are available for development (tag <code>work</code>) and production (tag <code>prod</code>).</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><ul><li><code>composer require escolalms/images</code></li><li><code>php artisan migrate</code></li></ul><h2 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to &quot;Database&quot;">​</a></h2><ul><li><code>image_caches</code> - table for saving the original and resized image path</li></ul><table><thead><tr><th style="text-align:left;">id</th><th style="text-align:left;">path</th><th style="text-align:left;">hash_path</th><th style="text-align:left;">created_at</th><th style="text-align:left;">updated_at</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">avatars/1/avatar.jpg</td><td style="text-align:left;">imgcache/68840270724ee4ff0b481f4fbd2299e13dfe2447.jpg</td><td style="text-align:left;">2022-05-05 11:29:04</td><td style="text-align:left;">2022-05-05 11:29:04</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">avatars/4/avatar4.jpg</td><td style="text-align:left;">imgcache/d0f1ab43ae7f2924682b2ce734a24fa7066a8ea7.jpg</td><td style="text-align:left;">2022-05-05 11:30:49</td><td style="text-align:left;">2022-05-05 11:30:49</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">avatars/2/avatar2.jpg</td><td style="text-align:left;">imgcache/94c6c83db6562161d38620a74e4e07fb3d9e39ed.jpg</td><td style="text-align:left;">2022-05-05 11:30:39</td><td style="text-align:left;">2022-05-05 11:30:39</td></tr></tbody></table><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h3 id="default-one-image-as-302-redirect-result" tabindex="-1">Default. One image as <code>302</code> redirect result . <a class="header-anchor" href="#default-one-image-as-302-redirect-result" aria-label="Permalink to &quot;Default. One image as \`302\` redirect result .&quot;">​</a></h3><p>Basic resize is made by URL API call which redirects to new created file</p><p>Example <code>GET</code> call</p><ul><li><code>http://localhost/api/images/img?path=test.jpg&amp;w=100</code> call should return resized image to width 100px</li><li>checks if file exsitis</li><li>if not, creates one with availabe libraries</li><li>returns 302 redirect</li><li>example <code>http://localhost/storage/imgcache/891ee133a8bb111497d494d4c91fe292d9d16bb3.jpg</code> (assuming you&#39;re using local disk storage, in case of s3 location origin would differ)</li></ul><h3 id="resizing-many-images-at-once-json-array-as-a-result" tabindex="-1">Resizing many images at once. JSON array as a result. <a class="header-anchor" href="#resizing-many-images-at-once-json-array-as-a-result" aria-label="Permalink to &quot;Resizing many images at once. JSON array as a result.&quot;">​</a></h3><p>Example <code>POST</code> call like</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">POST</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/api/images/img</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HTTP/1.1</span></span>
<span class="line"><span style="color:#FFCB6B;">Host:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">localhost:1000</span></span>
<span class="line"><span style="color:#FFCB6B;">Content-Type:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">application/json</span></span>
<span class="line"><span style="color:#FFCB6B;">Content-Length:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">212</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">&quot;paths&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> [{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">&quot;path&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tutor_avatar.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">&quot;params&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">&quot;w&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  }, </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">&quot;path&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tutor_avatar.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">&quot;params&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">&quot;w&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  }, </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">&quot;path&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tutor_avatar.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">&quot;params&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">&quot;w&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">300</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  }]</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>generates following result</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost/storage/imgcache/3421584c40d270d0fa7ef0c31445a1565db07cb4.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">imgcache/3421584c40d270d0fa7ef0c31445a1565db07cb4.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">hash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3421584c40d270d0fa7ef0c31445a1565db07cb4</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost/storage/imgcache/7efc528c2cc7b57d79a42f80d2c1891b517cabfe.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">imgcache/7efc528c2cc7b57d79a42f80d2c1891b517cabfe.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">hash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">7efc528c2cc7b57d79a42f80d2c1891b517cabfe</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost/storage/imgcache/5db4f572d8c8b1cb6ad97a3bffc9fd6c18b56cc3.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">imgcache/5db4f572d8c8b1cb6ad97a3bffc9fd6c18b56cc3.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">hash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5db4f572d8c8b1cb6ad97a3bffc9fd6c18b56cc3</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span></code></pre></div><h2 id="hashing-algorithm" tabindex="-1">Hashing algorithm <a class="header-anchor" href="#hashing-algorithm" aria-label="Permalink to &quot;Hashing algorithm&quot;">​</a></h2><p>There is simple algorithm to guess the result image URL. This allows frontend application to know the processed URL without calling API. As follows</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test.jpg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">params </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">w</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">=&gt;</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">hash </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sha1</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json_encode</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">params</span><span style="color:#89DDFF;">));</span></span></code></pre></div><p>then result URL would be</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">output_file </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">url_prefix</span><span style="color:#89DDFF;">.</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">.</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">extension</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="endpoint" tabindex="-1">Endpoint <a class="header-anchor" href="#endpoint" aria-label="Permalink to &quot;Endpoint&quot;">​</a></h2><p>There is API endpoints documentation <a href="https://escolalms.github.io/Images/" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/documentation-swagger-green" alt="swagger"></a></p><h2 id="tests" tabindex="-1">Tests <a class="header-anchor" href="#tests" aria-label="Permalink to &quot;Tests&quot;">​</a></h2><p>Run <code>./vendor/bin/phpunit</code> to run tests.</p><p>Test details <a href="https://codecov.io/gh/EscolaLMS/Images" target="_blank" rel="noreferrer"><img src="https://codecov.io/gh/EscolaLMS/Images/branch/main/graph/badge.svg?token=NRAN4R8AGZ" alt="codecov"></a><a href="https://github.com/EscolaLMS/Courses/actions/workflows/test.yml" target="_blank" rel="noreferrer"><img src="https://github.com/EscolaLMS/Images/actions/workflows/test.yml/badge.svg" alt="phpunit"></a></p><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h2><p>This package extends <code>filesystem</code>.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$this-&gt;app-&gt;extend(&#39;filesystem&#39;, function ($service, $app) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    return new CustomFilesystemManager($app);</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span></code></pre></div><ol><li><code>FileDeleted</code> - The event is dispatched when you use <code>delete</code> method on the <code>Storage</code> facade.</li><li><code>FileStored</code> - The event is dispatched when you use <code>put</code>, <code>putFile</code> or <code>putFileAs</code> method.</li></ol><h2 id="listeners" tabindex="-1">Listeners <a class="header-anchor" href="#listeners" aria-label="Permalink to &quot;Listeners&quot;">​</a></h2><p>This package listens for <code>FileDeleted</code> and <code>FileStored</code> events and removes the resized images from the given path.</p><h2 id="how-to-use-this-on-frontend" tabindex="-1">How to use this on frontend <a class="header-anchor" href="#how-to-use-this-on-frontend" aria-label="Permalink to &quot;How to use this on frontend&quot;">​</a></h2><p>Below is our totally <strong>headless</strong> approach on generating images</p><p>The following example tries to achives 2 purposes</p><ul><li>generate image on fly, frontend decide what sizes are needed</li><li>images are not served by API</li></ul><p>The idea is that since we know tha hashing algoritm for cached images we can guess that the URL will be like. If that URL is throwing 404 then we&#39;re calling the API endpoint to generate one. Fortunately this endpoint creates an requested image, caches it and returns redirect which is good for image src.</p><p>A major disadvantage of this approach is that first user once will get 404 in networking and experince few seconds delay before image is rendered after not founded.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sha1.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Initial variables </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> imgPath </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tutor_avatar.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> imgPrefix </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost/storage/imgcache</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> apiUrl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost/api/images/img</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rndWith </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">round</span><span style="color:#A6ACCD;">(Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> params </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">w</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> rndWith</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// random width params</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// super important that all param values are strings </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// hash from { w: 100 } is different then { w: &quot;100&quot; }</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// stright forward helper to convert obejct to URL query params </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> paramsToUrl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entries</span><span style="color:#A6ACCD;">(params)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&amp;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/** </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * @param string path, example &quot;tutor_avatar.jpg&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * @param array params, example { w: &quot;100&quot; } or { w: &quot;100&quot;, h: &quot;10&quot; }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * @return Image </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getImage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hash</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">SHA1</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">params</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">imgPrefix</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">imgApiUrl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">apiUrl</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/?path=</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">imgPath</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&amp;</span><span style="color:#89DDFF;">\${</span><span style="color:#82AAFF;">paramsToUrl</span><span style="color:#A6ACCD;">(params)</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">image</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Image</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">image</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">image</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onerror</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">image</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">imgApiUrl</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// the cached version does not exists yet, lets call API to create one and redirect.</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">image</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">imgApiUrl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">image</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">getImage</span><span style="color:#A6ACCD;">(imgPath</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> params))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Working example is availabe in <a href="https://github.com/EscolaLMS/Images/tree/main/doc" target="_blank" rel="noreferrer">doc</a> folder.</p>`,47),p=[e];function t(r,c,i,y,D,F){return a(),n("div",null,p)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
